#!/bin/bash

set -x

yum install -y gcc-c++ make git lsof

# install node.js
curl -sL https://rpm.nodesource.com/setup_7.x | sudo -E bash -
yum -y install nodejs

# install postgresql
yum install -y https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm
yum -y install postgresql96 postgresql96-server postgresql96-devel postgresql96-libs postgresql96-contrib

systemctl enable postgresql-9.6
/usr/pgsql-9.6/bin/postgresql96-setup initdb
sed -i'' '/127.0.0.1/ s/ident/trust/' /var/lib/pgsql/9.6/data/pg_hba.conf
systemctl start postgresql-9.6

sudo -u postgres createuser -s jdugan
sudo -u postgres createuser -s _node
sudo -u postgres createdb -O _node oscars

export PATH=$PATH:/usr/pgsql-9.6/bin/

# python virtualenv
yum -y install python-virtualenv python2-pip
pip install --upgrade pip
pip install supervisor psycopg2

# nginx
yum -y install nginx
cat >/etc/nginx/nginx.conf <<EOF
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    server {
        server_name  oscars-party.x1024.net;

        location / {
            proxy_pass http://localhost:3001;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

    #listen [::]:443 ssl ipv6only=on; # managed by Certbot
    #listen 443 ssl; # managed by Certbot
    #ssl_certificate /etc/letsencrypt/live/oscars-party.x1024.net/fullchain.pem; # managed by Certbot
    #ssl_certificate_key /etc/letsencrypt/live/oscars-party.x1024.net/privkey.pem; # managed by Certbot
    #include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    #ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    }

    server {
    if ($host = oscars-party.x1024.net) {
        return 301 https://$host$request_uri;
    } # managed by Certbot
        listen       80;
        listen       [::]:80 default_server;
        server_name  oscars-party.x1024.net;
    return 404; # managed by Certbot
}}
EOF
systemctl enable nginx
systemctl start nginx

# allow nginx to proxy
setsebool -P httpd_can_network_connect on

# install certbot
yum -y install yum-utils
yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
yum -y install certbot-nginx

# TODO -- configure Let's Encrypt

# setup user for app
useradd -m -d /home/_node _node

# Get the application source code from github
# git requires $HOME and it's not set during the startup script.
export HOME=/root
git config --global credential.helper gcloud.sh
git clone https://github.com/jdugan1024/oscars-party.git /opt/app
chown -R _node:_node /opt/app

sudo -u _node psql oscars < /opt/app/server/oscars.sql
sudo -u _node sh -c "cd /opt/app/data-loading/ && python insert_data.py"

cd /opt/app/server
sudo -u _node npm install

# setup supervisor
mkdir -p /etc/supervisord/conf.d

cat >/usr/lib/systemd/system/supervisord.service << EOF
[Unit]
Description=supervisord - Supervisor process control system for UNIX
Documentation=http://supervisord.org
After=network.target

[Service]
Type=forking
ExecStart=/bin/supervisord -c /etc/supervisord/supervisord.conf
ExecReload=/bin/supervisorctl reload
ExecStop=/bin/supervisorctl shutdown
User=root

[Install]
WantedBy=multi-user.target
EOF

SUPERVISOR_CONF=/etc/supervisord/supervisord.conf
echo_supervisord_conf > ${SUPERVISOR_CONF}

systemctl enable supervisord
systemctl start supervisord

cat >>${SUPERVISOR_CONF} << EOF

[program:oscars]
directory=/opt/app/server
command=npm start
autostart=true
autorestart=true
user=_node
environment=HOME="/home/_node",USER="_node",NODE_ENV="production"
stdout_logfile=syslog
stderr_logfile=syslog
EOF

supervisorctl -c ${SUPERVISOR_CONF} reread
supervisorctl -c ${SUPERVISOR_CONF} update
